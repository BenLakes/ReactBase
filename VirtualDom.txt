虚拟DOM的处理方式：

1. state 数据
JSX 模板
state + 模板 结合生成真实的DOM 直接显示
state 发生改变
数据 + 模板 结合 生成真实的DOM 替换原始的DOM

缺陷：
每次的 数据的更新都 直接替换掉替换或操作DOM 非常耗性能

2. state 数据
  jsx 模板
  数据 + 模板 结合，生成真实的DOM, 并不直接替换原始的DOM
  新的DOM 和 原始的DOM 做对比，找差异
  找出差异 后 用新的差异 替换老的差异  

  缺陷： 
    性能的提升并不明显

  3. state 数据
     jsx 模板
     数据 + 模板 结合 生成真实的DOM 来显示
     生成虚拟DOM (虚拟DOM 就是一个JS对象,用它来描述真实DOM) (损耗了性能)
     state 发生变化
     数据 + 模板 生成新的虚拟DOM （极大提高性能）
     比较原始虚拟DOM 和 新的虚拟DOM对象，找出区别的 元素 或内容(极大的提升性能)
     直接操作DOM，改变span 中的内容  



   4. state 数据
      JSX 模板
      数据 + 模板 生成虚拟DOM（虚拟DOM就是一个JS对象，用它来描述真实DOM）（损耗了性能）    
       用虚拟DOM的结构生成真实的DOM,来显示
       state 发生变化
       数据 + 模板 生成新的虚拟DOM （极大提升性能）
       比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span 中内容(极大提升性能)
       直接操作DOM，改变span中的内容

    优点：性能提升了
          使得跨端得以实现。 React-Native    






